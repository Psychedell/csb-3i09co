{"version":3,"sources":["components/Button/Button.module.css","components/TaskCounter/TaskCounter.module.css","components/TaskForm/TaskForm.module.css","components/TaskList/TaskList.module.css","components/Layout/Layout.module.css","components/StatusFilter/StatusFilter.module.css","components/Layout/Layout.js","redux/actions.js","redux/constants.js","components/Button/Button.js","redux/selectors.js","components/StatusFilter/StatusFilter.js","components/TaskCounter/TaskCounter.js","components/AppBar/AppBar.js","components/TaskForm/TaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/App.js","redux/reducer.js","redux/store.js","index.js","components/AppBar/AppBar.module.css","components/Task/Task.module.css"],"names":["module","exports","Layout","children","className","css","container","nanoid","require","statusFilters","Object","freeze","all","active","completed","Button","selected","type","otherProps","clsx","btn","isSelected","getTasks","state","tasks","getStatusFilter","filters","status","StatusFilter","dispatch","useDispatch","filter","useSelector","handleFilterChange","payload","wrapper","onClick","TaskCounter","count","reduce","acc","task","text","AppBar","section","title","TaskForm","form","onSubmit","event","preventDefault","target","elements","value","id","reset","field","name","placeholder","Task","checkbox","checked","onChange","TaskList","visibleTasks","statusFilter","getVisibleTasks","list","map","listItem","App","tasksInitialState","filtersInitialState","store","configureStore","reducer","action","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.424a1f8c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"isSelected\":\"Button_isSelected__2JVMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TaskCounter_text__3WbH2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__1kzwH\",\"field\":\"TaskForm_field__8trCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__2xVr5\",\"listItem\":\"TaskList_listItem__XeAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StatusFilter_wrapper__1VEdi\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","const { nanoid } = require(\"nanoid\");\r\n\r\nexport const addTask = text => {\r\n  return {\r\n    type: \"tasks/addTask\",\r\n    payload: {\r\n      id: nanoid(),\r\n      completed: false,\r\n      text,\r\n    },\r\n  };\r\n};\r\n\r\nexport const deleteTask = taskId => {\r\n  return {\r\n    type: \"tasks/deleteTask\",\r\n    payload: taskId,\r\n  };\r\n};\r\n\r\nexport const toggleCompleted = taskId => {\r\n  return {\r\n    type: \"tasks/toggleCompleted\",\r\n    payload: taskId,\r\n  };\r\n};\r\n\r\nexport const setStatusFilter = value => {\r\n  return {\r\n    type: \"filters/setStatusFilter\",\r\n    payload: value,\r\n  };\r\n};\r\n","export const statusFilters = Object.freeze({\r\n  all: \"all\",\r\n  active: \"active\",\r\n  completed: \"completed\",\r\n});\r\n","import clsx from \"clsx\";\nimport css from \"./Button.module.css\";\n\nexport const Button = ({\n  selected = false,\n  type = \"button\",\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n","export const getTasks = state => state.tasks;\r\nexport const getStatusFilter = state => state.filters.status;\r\n","import { useSelector, useDispatch } from \"react-redux\";\n// Импортируем генератор экшена\nimport { setStatusFilter } from \"../../redux/actions\";\n// Импортируем объект значений фильтра\nimport { statusFilters } from \"../../redux/constants\";\nimport { Button } from \"components/Button/Button\";\nimport css from \"./StatusFilter.module.css\";\nimport { getStatusFilter } from \"redux/selectors\";\n\nexport const StatusFilter = () => {\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n\n  const filter = useSelector(getStatusFilter);\n\n  // Вызываем генератор экшена и передаём значение фильтра\n  // Отправляем результат - экшен изменения фильтра\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  return (\n    <div className={css.wrapper}>\n      <Button\n        selected={filter === statusFilters.all}\n        onClick={() => handleFilterChange(statusFilters.all)}\n      >\n        All\n      </Button>\n      <Button\n        selected={filter === statusFilters.active}\n        onClick={() => handleFilterChange(statusFilters.active)}\n      >\n        Active\n      </Button>\n      <Button\n        selected={filter === statusFilters.completed}\n        onClick={() => handleFilterChange(statusFilters.completed)}\n      >\n        Completed\n      </Button>\n    </div>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport { getTasks } from \"redux/selectors\";\nimport css from \"./TaskCounter.module.css\";\n\nexport const TaskCounter = () => {\n  // Получаем массив задач из состояния Redux\n  const tasks = useSelector(getTasks);\n  // На базе состояния Redux получаем производные данные\n  const count = tasks.reduce(\n    (acc, task) => {\n      if (task.completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n\n  return (\n    <div>\n      <p className={css.text}>Active: {count.active}</p>\n      <p className={css.text}>Completed: {count.completed}</p>\n    </div>\n  );\n};\n","import { StatusFilter } from \"components/StatusFilter/StatusFilter\";\nimport { TaskCounter } from \"components/TaskCounter/TaskCounter\";\nimport css from \"./AppBar.module.css\";\n\nexport const AppBar = () => {\n  return (\n    <header className={css.wrapper}>\n      <section className={css.section}>\n        <h2 className={css.title}>Tasks</h2>\n        <TaskCounter />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Filter by status</h2>\n        <StatusFilter />\n      </section>\n    </header>\n  );\n};\n","import { Button } from \"components/Button/Button\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"redux/actions\";\nimport css from \"./TaskForm.module.css\";\n\nexport const TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    dispatch(addTask(form.elements.text.value));\n\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};\n","// Импортируем хук\nimport { useDispatch } from \"react-redux\";\n// Импортируем генератор экшена\nimport { deleteTask, toggleCompleted } from \"../../redux/actions\";\nimport { MdClose } from \"react-icons/md\";\nimport css from \"./Task.module.css\";\n\nexport const Task = ({ task }) => {\n  // Получаем ссылку на функцию отправки экшенов\n  const dispatch = useDispatch();\n  // Вызываем генератор экшена и передаём идентификатор задачи\n  // Отправляем результат - экшен удаления задачи\n  const handleDelete = () => dispatch(deleteTask(task.id));\n\n  // Вызываем генератор экшена и передаём идентификатор задачи\n  // Отправляем результат - экшен переключения статуса задачи\n  const handleToggle = () => dispatch(toggleCompleted(task.id));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={task.completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{task.text}</p>\n      <button className={css.btn} onClick={handleDelete}>\n        {/* <MdClose size={24} /> */}\n        &#10008;\n      </button>\n    </div>\n  );\n};\n","import { useSelector } from \"react-redux\";\nimport { statusFilters } from \"../../redux/constants\";\nimport { Task } from \"components/Task/Task\";\nimport css from \"./TaskList.module.css\";\nimport { getStatusFilter, getTasks } from \"redux/selectors\";\n\nconst getVisibleTasks = (tasks, statusFilter) => {\n  switch (statusFilter) {\n    case statusFilters.active:\n      return tasks.filter(task => !task.completed);\n    case statusFilters.completed:\n      return tasks.filter(task => task.completed);\n    default:\n      return tasks;\n  }\n};\n\nexport const TaskList = () => {\n  // Получаем массив задач из состояния Redux\n  const tasks = useSelector(getTasks);\n  // Получаем значение фильтра из состояния Redux\n  const statusFilter = useSelector(getStatusFilter);\n  // Вычисляем массив задач которые необходимо отображать в интерфейсе\n  const visibleTasks = getVisibleTasks(tasks, statusFilter);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Layout } from \"components/Layout/Layout\";\nimport { AppBar } from \"components/AppBar/AppBar\";\nimport { TaskForm } from \"components/TaskForm/TaskForm\";\nimport { TaskList } from \"components/TaskList/TaskList\";\n\nexport const App = () => {\n  return (\n    <Layout>\n      <AppBar />\n      <TaskForm />\n      <TaskList />\n    </Layout>\n  );\n};\n","import { statusFilters } from \"./constants\";\r\n\r\nconst tasksInitialState = [\r\n  { id: 0, text: \"Learn HTML and CSS\", completed: true },\r\n  { id: 1, text: \"Get good at JavaScript\", completed: true },\r\n  { id: 2, text: \"Master React\", completed: false },\r\n  { id: 3, text: \"Discover Redux\", completed: false },\r\n  { id: 4, text: \"Build amazing apps\", completed: false },\r\n];\r\n\r\nexport const tasksReducer = (state = tasksInitialState, action) => {\r\n  switch (action.type) {\r\n    case \"tasks/addTask\":\r\n      return [...state, action.payload];\r\n    case \"tasks/deleteTask\":\r\n      return state.filter(task => task.id !== action.payload);\r\n    case \"tasks/toggleCompleted\":\r\n      return state.map(task => {\r\n        if (task.id !== action.payload) {\r\n          return task;\r\n        }\r\n        return { ...task, completed: !task.completed };\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filtersInitialState = {\r\n  status: statusFilters.all,\r\n};\r\n\r\nexport const filtersReducer = (state = filtersInitialState, action) => {\r\n  switch (action.type) {\r\n    case \"filters/setStatusFilter\":\r\n      return {\r\n        ...state,\r\n        status: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// import { configureStore } from \"@reduxjs/toolkit\";\r\n// import { filtersReducer, tasksReducer } from \"./reducer\";\r\n\r\n// export const store = configureStore({\r\n//   reducer: {\r\n//     task: tasksReducer,\r\n//     filters: filtersReducer,\r\n//   },\r\n// });\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { tasksReducer, filtersReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n    filters: filtersReducer,\r\n  },\r\n});\r\n","import ReactDOM from \"react-dom/client\";\nimport { App } from \"components/App\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppBar_wrapper__21lfN\",\"section\":\"AppBar_section__3Iy4s\",\"title\":\"AppBar_title__JfHv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Task_wrapper__1Un4J\",\"text\":\"Task_text__7szr-\",\"btn\":\"Task_btn__2cnNo\",\"checkbox\":\"Task_checkbox__1kBaq\"};"],"sourceRoot":""}